Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es 
  precision highp float;

  out vec4 fragmentColor;
  in vec4 texCoord; // passed from VS
  in vec4 worldPos;
  in vec4 worldNormal;

  // we need to bind texture to this
  uniform sampler2D colorTexture;
  
  uniform samplerCube envMapTexture;
  
  
uniform struct
{
	vec3 lightPos;
	float power;
	vec3 kd;
	vec3 ks;
	float gamma;	
   vec3 cameraPos;
} light;

void main(void) {
	
	vec3 lightDir=light.lightPos-worldPos.xyz;
	lightDir=normalize(lightDir);
	
	vec3 viewDir = light.cameraPos-worldPos.xyz;
	viewDir=normalize(viewDir);
	
    
	vec3 normal = normalize(worldNormal.xyz);
	
	vec3 halfway = lightDir+viewDir;
	halfway=normalize(halfway);
	
	float cosa=dot(halfway,normal);
	if (cosa < 0.0) cosa=0.0;
	//fragmentColor=vec4(abs(normal),1);
	

	
	float costhetamarked=dot(worldNormal.xyz,lightDir);
	if (costhetamarked <0.0) costhetamarked=0.0;
	float costheta=dot(worldNormal.xyz,viewDir);
	if (costheta <0.0) costheta=0.0;

//fragmentColor = texture(colorTexture, texCoord.xy/(texCoord.w));
fragmentColor = texture(envMapTexture, reflect(-viewDir.xyz, worldNormal.xyz));



float szorzo=pow(cosa,light.gamma)*costhetamarked/max(costheta,costhetamarked);

	fragmentColor.x = fragmentColor.x*(light.kd.x+light.ks.x*szorzo);
	fragmentColor.y = fragmentColor.y*(light.kd.y+light.ks.y*szorzo);
	fragmentColor.z = fragmentColor.z*(light.kd.z+light.ks.z*szorzo);
	
	
  }

`;