Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es 
  precision highp float;

  out vec4 fragmentColor;
  in vec4 texCoord; // passed from VS
  in vec4 worldPos;
  in vec4 worldNormal;
  
  uniform sampler2D normalTexture;  
  uniform samplerCube envMapTexture;
  uniform vec3 kd;
  uniform vec3 ks;
  uniform float gamma;
  
uniform struct
{ 
	vec3 lightPos;
	float power;
	vec3 cameraPos;
	float time;  
} light;


void main(void) {
	
	vec3 lightDir=light.lightPos-worldPos.xyz;
	lightDir=normalize(lightDir);
	
	vec3 viewDir = light.cameraPos-worldPos.xyz;
	viewDir=normalize(viewDir);
	
    
	vec3 normal = normalize(worldNormal.xyz);
	normal = vec3(0,1,0);	
	
	vec3 sub=vec3(0.5,0.5,0.5);


	normal=vec3(0,0,0);
	normal+=5.0*(texture(normalTexture, 0.2*texCoord.xy/(texCoord.w)+vec2(light.time/100.0,0)).xyz-sub);
	normal+=texture(normalTexture, texCoord.xy/(texCoord.w)+vec2(0,light.time/20.0)).xyz-sub;
	//normal.y-=0.4;
	normal=normalize(normal);
	
	float temp=normal.z;
	normal.z=normal.y;
	normal.y=normal.x;
	normal.x=temp;

	
	vec3 halfway = lightDir+viewDir;
	halfway=normalize(halfway);
	
	float cosa=dot(halfway,normal);
	if (cosa < 0.0) cosa=0.0;	

	
	float costhetamarked=dot(normal,lightDir);
	if (costhetamarked <0.0) costhetamarked=0.0;
	float costheta=dot(normal,viewDir);
	if (costheta <0.0) costheta=0.0;

	fragmentColor = texture(envMapTexture, reflect(-viewDir.xyz, normal));

	float szorzo=pow(cosa,gamma)*(costhetamarked/max(costheta,costhetamarked));
	szorzo=0.0;

	fragmentColor.xyz = fragmentColor.xyz*(kd+ks*szorzo);
	
	//fragmentColor=vec4(normal.z,0,0,1);
	//fragmentColor.xyz=normal;

  }
  
  
  

`;